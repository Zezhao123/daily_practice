leetcode#206

leetcode#144. Binary Tree Preorder Traversal
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    
    
    
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        
        res=[]
        
        if root==None:
            return res
        
        else:
            res.append(root.val)
            return res+self.preorderTraversal(root.left)+self.preorderTraversal(root.right)


class Solution:
    
    
    
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        
        return [root.val]+self.preorderTraversal(root.left)+self.preorderTraversal(root.right)




leetcode#102. Binary Tree Level Order Traversal

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        
        if root is None:
            return []
        
        levels = []
        
        self.helper(root,0,levels)
        
        return levels
    
    
    def helper(self,node,level,levels):

        if len(levels)==level:
            levels.append([])

        levels[level].append(node.val)



        if node.left:
            self.helper(node.left,level+1,levels)

        if node.right:
            self.helper(node.right,level+1,levels)
 
101. Symmetric Tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        if root is None:
            return[]
        return self.helper(root,root)
    
    def helper(self,root1,root2):
        if root1 is None and root2 is None:
            return True
        if root1 is None or root2 is None:
            return False
        if root1.val != root2.val:
            return False
        
        return self.helper(root1.left,root2.right) and self.helper(root1.right,root2.left)


226. Invert Binary Tree
#top down
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if root is None:
            return root
        
        
        def helper(node):
            
            node.left,node.right = node.right,node.left
            
            if node.left:
                helper(node.left)
            
            if node.right:
                helper(node.right)
        
        helper(root)
        
        return root


# bottom up
class Solution:
    def invertTree(self, root):
        if root is None:
            return None
        root.left, root.right = \
            self.invertTree(root.right), self.invertTree(root.left)
        return root



112. Path Sum
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        if root is None:
            return False
        
        res=0
        def helper(node,targetSum,res):
            
            res=res+node.val
            if node.left is None and node.right is None and res==targetSum:
                return True
            
            if node.left:
                test=helper(node.left,targetSum,res)
                if test:
                    return True
            
            
            if node.right:
                test=helper(node.right,targetSum,res)
                if test:
                    return True
            return False
            
                
        
        test=helper(root,targetSum,res)
        
        
        return test


class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        if root is None:
            return False
         
        res=targetSum-root.val
        
        if root.left is None and root.right is None:  # check if it is leaf
            if res==0:
                return True
            else:
                return False
        
        return self.hasPathSum(root.left,res) or self.hasPathSum(root.right,res)   

617. Merge Two Binary Trees
class Solution:
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        
        
        if not root2:
            return root1
        if not root1:
            return root2
        
        root1.val += root2.val
        root1.left = self.mergeTrees(root1.left,root2.left)
        root1.right = self.mergeTrees(root1.right,root2.right)
        
        return root1


701. Insert into a Binary Search Tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        
        if not root:
            return TreeNode(val)
        
        if val < root.val:
            root.left = self.insertIntoBST(root.left,val)
            
        else:
            root.right = self.insertIntoBST(root.right,val)
        
        return root

98. Validate Binary Search Tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        
        def helper(node,low,high):
            if not node:
                return True
            
            if node.val>=high or node.val<=low:
                return False
            
            return ( helper(node.left,low,node.val) and helper(node.right,node.val,high))
        
        return helper(root,-math.inf,math.inf)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:

        def inorder(root):
            if not root:
                return True
            if not inorder(root.left):
                return False
            if root.val <= self.prev:
                return False
            self.prev = root.val
            return inorder(root.right)

        self.prev = -math.inf
        return inorder(root)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

77. Combinations
class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        
        res = []
        
        def backtrack(first=1,cur=[]):
            if len(cur) == k:
                res.append(cur[:])
                return
            
            for i in range(first,n+1):
                cur.append(i)
                backtrack(i+1,cur)
                cur.pop()
                
        backtrack()        
        return res

46. Permutations
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        
        res=[]
        n = len(nums)
        
        def backtrack(cur=[]):
            if len(cur) == n:
                res.append(cur[:])
                return
            
            for i in range(n):
                if nums[i] not in cur:
                    cur.append(nums[i])
                    backtrack(cur)
                    cur.pop()
        
        backtrack()
        return res


class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        
        res=[]
        n = len(nums)
        
        def backtrack(first=0):
            if first == n:
                res.append(nums[:])
            
            for i in range(first,n):
                nums[first],nums[i] = nums[i],nums[first]
                backtrack(first+1)
                nums[i],nums[first] = nums[first],nums[i]
        
        backtrack()
        return res

784. Letter Case Permutation
class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        res = []
        
        def backtrack(first=0,cur=''):
            if first == len(s):
                res.append(cur)
                return
            
            temp=cur
            for i in range(2):
                if s[first].isalpha():
                    if i == 0:
                        cur=cur+s[first].upper()
                    else:
                        cur=cur+s[first].lower()
                else:
                    cur=cur+s[first]
                    backtrack(first+1,cur)
                    break
                    
                backtrack(first+1,cur)
                cur= temp
        
        backtrack()
        
        return res


class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        res = []
        
        def backtrack(first=0,cur=''):
            if first == len(s):
                res.append(cur)
                return
            if s[first].isalpha():
                backtrack(first+1,cur+s[first].upper())
                backtrack(first+1,cur+s[first].lower())
            else:
                backtrack(first+1,cur+s[first])
        
        backtrack()
        
        return res


70. Climbing Stairs
class Solution:
    def climbStairs(self, n: int) -> int:
        
        if n==1:
            return 1
        
        nums = [0 for i in range(n+1)]
        nums[0] =1
        nums[1] =1
        res = 0
        for i in range(2,n+1):
            nums[i] = nums[i-1]+nums[i-2]
        
        return nums[n]

class Solution:
    def climbStairs(self, n: int) -> int:
        
        if n==1:
            return 1
        
        first=1
        second = 1
        res =0
        for i in range(1,n):
            res = first + second
            first = second
            second = res
        
        return res


198. House Robber

class Solution:
    def rob(self, nums: List[int]) -> int:
        
        return self.robfrom(0,nums)
    
    
    def __init__(self):
        self.memo={}
    
    def robfrom(self,i,nums):
        
        if i>=len(nums):
            return 0
        
        if i in self.memo:
            return self.memo[i]
        
        
        ans = max((self.robfrom(i+2,nums)+nums[i]),self.robfrom(i+1,nums))
        
        self.memo[i] = ans
        
        return ans


class Solution:
    def rob(self, nums: List[int]) -> int:
        
        
        if len(nums) == 1:
            return nums[0]
        
        if len(nums) == 2:
            return max(nums[0],nums[1])
        
        stored = [0 for i in range(len(nums))]
        stored[-1]=nums[-1]
        stored[-2]=max(nums[-1],nums[-2])
        
        for i in range(len(nums)-3,-1,-1):
            stored[i] = max((stored[i+2]+nums[i]),stored[i+1])
        
        return stored[0]

class Solution:
    def rob(self, nums: List[int]) -> int:
        
        
        if len(nums) == 1:
            return nums[0]
        
        if len(nums) == 2:
            return max(nums[0],nums[1])
        
        
        cur_next_next=nums[-1]
        cur_next=max(nums[-1],nums[-2])
        
        for i in range(len(nums)-3,-1,-1):
            cur = max((nums[i]+cur_next_next),cur_next)
            cur_next_next = cur_next
            cur_next = cur
            
        return cur
        


120. Triangle

class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        
        return self.minfrom(triangle,0,0)
        
    def __init__(self):
        self.memo={}
    
    def minfrom(self,triangle,m,n):
        
        if m>=len(triangle):
            return 0
        
        if (m,n) in self.memo:
            return self.memo[(m,n)]
        
        ans = min(self.minfrom(triangle,m+1,n)+triangle[m][n],
                                               self.minfrom(triangle,m+1,n+1)+triangle[m][n])
        
        self.memo[(m,n)] = ans
        
        return ans


class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        
        pre = triangle[0]
        for i in range(1,len(triangle)):
            cur = []
            for j in range(len(triangle[i])):
                if j==0:
                    cur.append(pre[j]+triangle[i][j]) 
                
                elif j == len(triangle[i])-1:
                    cur.append(pre[j-1]+triangle[i][j] )
                
                else:
                    
                    cur.append(min(pre[j-1]+triangle[i][j],pre[j]+triangle[i][j]))
                
            pre = cur

        return min(pre)


class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        
        m=len(triangle)
        
        for r in range(m-2,-1,-1):
            for c in range(len(triangle[r])):
                triangle[r][c] = min(triangle[r+1][c] + triangle[r][c], triangle[r+1][c+1] +  triangle[r][c] )
        
        return triangle [0][0]



class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        
        m=len(triangle)
        pre = triangle[-1]
        for r in range(m-2,-1,-1):
            cur = []
            for c in range(len(triangle[r])):
                cur.append(min(pre[c] + triangle[r][c], pre[c+1]+triangle[r][c]))
            pre = cur
        
        return pre[0]



139. Word Break
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        dp = {}
        def word_def(start,words):
            
            if start == len(s):
                return True
            
            if start in dp:
                return dp[start]
            
            for end in range(start+1,len(s)+1):
                if s[start:end] in words and word_def(end,words):
                    dp[start] = True
                    return dp[start]
            
            dp[start] = False
            
            return dp[start]
        
        return word_def(0,set(wordDict))


class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        wordDict = set(wordDict)
        n = len(s)
        dp = [False for i in range(n+1)] # if the current index can combined by wordDict
        dp[0] = True # dp[0] refer to empty []
        for end in range(1,n+1):
            for start in range(end):
                if dp[start] and s[start:end] in wordDict:
                    dp[end] = True
                    break
        
        return dp[n]

931. Minimum Falling Path Sum
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        
        n= len(matrix)
        dp = {}
        
        def helper(r,c): # return the minimum sum from top to current index
            
            if r == 0:
                return matrix[r][c]
            
            if (r,c) in dp:
                return dp[(r,c)]
            
            res1= matrix[r][c]+helper(r-1,c+1) if c+1<n else float('inf')
            res2= matrix[r][c]+helper(r-1,c) 
            res3= matrix[r][c]+helper(r-1,c-1) if c-1>-1 else float('inf')
            
            res = min(res1,res2,res3)
            
            dp[(r,c)] = res
            
            return res
        
        res = float('inf')
        for i in range(n):
            res = min(res,helper(n-1,i))
        
        return res





22. Generate Parentheses
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        
        res = []
        
        def helper(s="",l=0,r=0):
            
            if len(s) == n*2:
                res.append(s)
                return
            
            
            for i in ["(",")"]:
                
                if i == "(" and l<n:
                    helper(s+i,l+1,r)
                
                if i == ")" and r<l and r<n:
                    helper(s+i,l,r+1)
            
            return
        helper()
        return res

